# -*- coding: utf-8 -*-
"""Copia de Lab01_python_basico01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TCk51ULVhZyzVo5WTCDMc0rP3rJMJu2V

<a href="https://colab.research.google.com/github/hernansalinas/autogradesMetodosComputacionales/blob/main/Laboratorios_Taller/Lab01_python_basico01.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>




# Laboratorio 01
### Métodos computacionales para físicos  y astrónomos
### Universidad de Antioquia
### Profesores:
### Hernan D. Salinas Jiménez
### Juan Marcos Marin
"""

# Commented out IPython magic to ensure Python compatibility.
# Ejecutar esta celda antes de cada laboratorio
!git clone https://github.com/hernansalinas/autogradesMetodosComputacionales.git
path1=f"autogradesMetodosComputacionales/Laboratorios_Taller/libs/"
path2=f"autogradesMetodosComputacionales/Laboratorios_Taller/libs/Lab_autotesting01/"
# %run -i {path1}libUnitTest.py

"""# Operaciones básicas en python.


### Definicion de variables
1. Definir una variable x tipo entero.
2. Definir una variable y tipo float
3. Definir una variable z tipo string.
"""

# Defina la variables en esta celda

x = 3
y = 2.3
z = "f"

# Commented out IPython magic to ensure Python compatibility.
# Ejecute la presente celda para probar su solucion
# %run -i {path2}/test01.py

"""

###  Creación de Funciones
4. Crear una función con el nombre mul_lambda tipo lambda que multiple dos enteros, el resultado deberá ser un número entero.  

Ejemplo de ejecución:

```python

mul_lambda(a,b)
#donde a, y b son numeros enteros

```


5. Crear una función explicita con el nombre de sum_int, que realice la suma de dos números enteros

Ejemplo de ejecución:

```python

sum_int(a,b)
#donde a, y b son numeros enteros

```

"""

# Escriba las funciones en esta celda
def mul_lambda(x,y):
  return x*y
def sum_int(x,y):
  return x+y

# Commented out IPython magic to ensure Python compatibility.
# %run -i {path2}/test02.py

"""
###  Números complejos

6. Defina un número complejo w.
7. Retorne la parte imaginaria de w, almacenela en una variable w_img
8. Retorne la parte real de w, almacenela en una variable w_real.
9. Retorne el complejo conjugado de w, almacenla en una varible w_con.
"""

# Escriba acá su solución
w = complex(2,3)
w_img = w.imag
w_real = w.real
w_con = w.conjugate()

# Commented out IPython magic to ensure Python compatibility.
# %run -i {path2}/test03.py

"""###  Listas

10.0  Construir una lista L con las variables usadas hasta acá y los resultados de las funciones.

L=[x,y,z,mul_lambda, sum_int,w, w_img, w_real, w_con ]

11.0 Invierta la lista y almacene en una variable L_reverse

12.0 Almacene los elementos impares de la lista, L_imp

13.0 Almacene los elementos pares de la lista, L_par

14.0 Modifique el elemento 5 de la lista L con la palabra "hello world"

"""

from os import remove
# Escriba en esta celda su solucion
L=[x,y,z,mul_lambda, sum_int,w, w_img, w_real, w_con]
L_reverse = list(reversed(L)) # o L[::-1]
L_imp = L[1::2]
L_par = L[::2]
L[4] = "hello world"
L[4]

# Commented out IPython magic to ensure Python compatibility.
# %run -i {path2}/test04.py

"""###  Tuplas

15.0 Definir una tupla con 5 elementos almacenda en la variable Tup, los primeros 3 tipo string y los ultimos dos, tipo float.
"""

Tup = ("hola","mundo", "hola",1.0,1.0)

# Commented out IPython magic to ensure Python compatibility.
#  %run -i {path2}/test05.py

"""###  Set
16.0 Defina una variable tipo set llamada  D con los primeros 11 numeros primos, consultalos en la red. Notese que pasa en este variables cuando alguno de los elementos se repite

17.0 Defina una variable tipo set llamada E con los números naturales del 1 al 20.

18.0 Calcule la unión  y almacenela en una variable U.

19.0 Calcule la intersección y almacenela en una variable I

"""

# Escriba acá su solución
D = {2,3,5,7,11,13,17,19,23,29,31}
E = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20}
U = D.union(E)
I = D.intersection(E)

# Commented out IPython magic to ensure Python compatibility.
#  %run -i {path2}/test06.py

"""













###  Diccionarios
20.0 Construir un diccionario con 5 elementos cuya clave es el nombre del autor y valor el nombre del libro. Almacenarlo en una variable dicc.



"""

# Escriba acá su solución
dicc = {"ar":"jj", "am":"ll", "af":"kk", "av":"gg", "az":"bb"}
dicc

# Commented out IPython magic to ensure Python compatibility.
#  %run -i {path2}/test07.py

"""
####  Ciclos y condicionales

21.0  Cálculo de $\pi$. Empleando la siguiente seria :

\begin{equation}
\frac{\pi}{4} = 1 -\frac{1}{3}+\frac{1}{5}-\frac{1}{7}+\frac{1}{9}-...
\end{equation}

Construya una función llamada pi_number en el que entrado el valor de k,(número de términos de la serie ) calcule el valor de pi. Si k es negativo deberá retornar un error como una variable tipo string.

Ejemplo de ejecución:
```python
pi_number(10)
```"""

# Escriba acá su solución
def pi_number(k):
    if k < 0:
        return "Error: k debe ser un número positivo."

    pi_valor_estimado = 0
    proceso = 1

    for i in range(1, k*2 + 1, 2):
        pi_valor_estimado += proceso * (1 / i)
        proceso *= -1

    return pi_valor_estimado * 4

# Ejemplo de uso:
k = 5000
pi_aproximación = pi_number(k)
print(f"Valor aproximado de π con {k} términos: {pi_aproximación}")

# Commented out IPython magic to ensure Python compatibility.
#  %run -i {path2}/test08.py