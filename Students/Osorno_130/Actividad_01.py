# -*- coding: utf-8 -*-
"""actividad_01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V27m8U2u1mAcDHRN2NAFyK1aqps3wK8p
"""

def doble_factorial(n):
  esInt = isinstance(n, int)
  if esInt == False:
    print ("La variable ingresada como parámetro debe ser un entero")
    return 0
  if n < 0:
    print ("Solo se pueden ingresar enteros números positivos")
    return 0
  factorial = 1
  i = n
  while i > 0:
    factorial = factorial*i
    i = i-2
  return factorial

def dob_fac_recursiva(n, rec=False):
  esInt = isinstance(n, int)
  if esInt == False:
    print ("La variable ingresada como parámetro debe ser un entero")
    return 0
  if n < 0:
    if rec==False:
      print ("Solo se pueden ingresar enteros números positivos")
    return 0
  factorial = 1
  aux = n*dob_fac_recursiva(n-2,True)
  if aux != 0:
    factorial = aux
  return factorial

a = doble_factorial(1)
b = dob_fac_recursiva(1)
print(a," - ", b)

def lucas(n):
  esInt = isinstance(n, int)
  if esInt == False:
    print ("La variable ingresada como parámetro debe ser un entero")
    return 0
  if n < 0:
    print ("Solo se pueden ingresar enteros números positivos")
    return 0
  if n == 0:
    return 2
  inicial = 2
  lucas = 1
  for i in range(1,n):
    aux = lucas
    lucas = inicial + lucas
    inicial = aux
  return lucas

def lucas_rec(n,rec=False):
  esInt = isinstance(n, int)
  if esInt == False:
    print ("La variable ingresada como parámetro debe ser un entero")
    return 0
  if n < 0:
    if rec==False:
      print ("Solo se pueden ingresar enteros números positivos")
    return 0
  if n == 0:
    return 2
  inicial = 2
  lucas = 1
  for i in range(1,n):
    aux = lucas
    lucas = inicial + lucas
    inicial = aux
  return lucas

lucas(1)

def factorial(n,rec=False):
  esInt = isinstance(n, int)
  if esInt == False:
    print ("La variable ingresada como parámetro debe ser un entero")
    return 0
  if n < 0:
    if rec==False:
      print ("Solo se pueden ingresar números positivos")
    return 0
  fac = 1
  aux = n*(factorial(n-1,True))
  if aux != 0:
    fac = aux
  return fac

def binomial (n, k):
  n_esInt = isinstance(n, int)
  k_esInt = isinstance(k, int)
  if (n_esInt and k_esInt) == False:
    print ("Las variables ingresadas como parámetro debe enteros, n >= 0, k > 0")
    return -1
  if n < 0:
    print ("Solo se pueden ingresar números positivos para el valor de n, n >= 0, k > 0")
    return -1
  if k <= 0:
    print ("Solo se pueden ingresar números positivos para el valor de k, k > 0")
    return -1
  if k > n:
    return 0
  coeficiente = (factorial(n))/((factorial(k))*factorial(n-k))
  return coeficiente

binomial(5,3)