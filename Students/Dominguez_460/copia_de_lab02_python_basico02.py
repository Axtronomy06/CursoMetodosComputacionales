# -*- coding: utf-8 -*-
"""Copia de Lab02_python_basico02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EXV8lEmwOTF2RVJ68Ns_b7EltivM7b7i

<a href="https://colab.research.google.com/github/hernansalinas/autogrades/blob/main/Laboratorios_Taller/Lab02_python_basico02.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>


# Laboratorio 02
### Métodos computacionales para físicos  y astrónomos
### Universidad de Antioquia
### Prof: Hernan D. Salinas Jiménez
"""

# Ejecutar esta celda antes de cada laboratorio
!git clone https://github.com/hernansalinas/autogradesMetodosComputacionales.git

# Commented out IPython magic to ensure Python compatibility.
# Ejecutar esta celda antes de cada laboratorio
path="autogradesMetodosComputacionales/Laboratorios_Taller/libs"
pathL="autogradesMetodosComputacionales/Laboratorios_Taller/libs/Lab_02"
# %run -i {path}/libUnitTest.py

"""## Problemas

### Factorial
1. Elaborar un algoritmo e implementar en python, el factorial de un número entero `n` ingresado por el usuario.

1. Si el número es un entero deberá retornal el factorial del número.
2. Si el número es negativo deberá aparecer un mensaje tipo string con el mensaje  "el número no puede ser negativo"

3. Si el número es pertenece a los reales(float) el mensaje será, el número no puede ser real.


     ### Ejemplo de Ejecución
    ```python

    >>> factorial(3)
        6

    >>> factorial(1987123)
        =???
```

"""

def factorial(n):

  if n < 0:
    return "el número no puede ser negativo"
  elif type(n) == float:
    return "el número no puede ser real"
  else:
    if n == 0:
      return 1
    else:
      fac = 1
      for i in range(n,1,-1):
        fac *= i

  return fac

print(factorial(234.4))


def propio(a):
    lista_pro = []
    for i in range(1, a):
        residuo = a % i
        if residuo == 0:
            lista_pro.append(i)
    return lista_pro

# Commented out IPython magic to ensure Python compatibility.
# %run -i {pathL}/test01.py

"""### Teoria de números

Los enunciados 2 y 3 se refieren a la siguiente información:

Diseñar un programa en el que entrado  un numero `a`  retorne una variable booleana True or false si cumple que es:

2. [Números defectivo](https://es.wikipedia.org/wiki/Número_defectivo) : la suma de los divisores propios es menor que el número.

  La rutina se deberá llamar números_defectivos



3. [Números abundantes](https://es.wikipedia.org/wiki/Número_abundante): la suma de los divisores es mayor que el número.

  La rutina se deberá llamar números_abundantes



4. [Números semiperfectos](https://es.wikipedia.org/wiki/N%C3%BAmero_semiperfecto) la suma de todos o algunos de los divisores propios es igual al número.

  La rutina se debera llamar numeros_semiperfectos

5. [Números perfectos](https://es.wikipedia.org/wiki/N%C3%BAmero_perfecto) la suma de todos sus divisores propios, excepto el mismo numero, es igual al número.

   La rutina se deberá llamar numeros_perfectos


6. [Números primos](https://es.wikipedia.org/wiki/N%C3%BAmero_primo) el número es divisible unicamente por sí mismo y por 1.
   La rutina se deberá llamar numeros_primos


Problema no obligatorio:

P1. Retornar los 30 primeros números de cada clase
"""

def numeros_defectivos(a):

  x = sum(propio(a))

  if x < a:
    return True
  else:
    return False
print(numeros_defectivos(16))

# Commented out IPython magic to ensure Python compatibility.
# %run -i {pathL}/test02.py

def numeros_abundantes(a):

  x = sum(propio(a))

  if x > a:
    return True
  else:
    return False
print(números_abundantes(12))

# Commented out IPython magic to ensure Python compatibility.
# %run -i {pathL}/test03.py

from itertools import combinations

def propio(a):
    lista_pro = []
    for i in range(1, a):
        residuo = a % i
        if residuo == 0:
            lista_pro.append(i)
    return lista_pro

def numeros_semiperfectos(n):
    m = propio(n)
    combina = []
    for i in range(2, len(m) + 1):
        comb = list(combinations(m, i))
        combina.append(comb)

    for i in combina:
        for j in i:
            suma = sum(j)
            if suma == n:
                print(j, "=====", suma)
                return True
    return False

print(numeros_semiperfectos(6))

# Commented out IPython magic to ensure Python compatibility.
# %run -i {pathL}/test04.py

def propio(a):
    lista_pro = []
    for i in range(1, a):
        residuo = a % i
        if residuo == 0:
            lista_pro.append(i)
    return lista_pro

def numeros_perfectos(n):

  x = sum(propio(n))

  if x == n:
    return True
  else:
    return False

print(numeros_perfectos(498))

# Commented out IPython magic to ensure Python compatibility.
# %run -i {pathL}/test05.py

# numeros primos

def numeros_primos(n):
  cont = 0
  for i in range(2, n):
      if (n % i) == 0:
          cont += 1

  if cont == 0:
      return True
  else:
      return False

print(numeros_primos(5))

# Commented out IPython magic to ensure Python compatibility.
# %run -i {pathL}/test06.py

"""
7. Diseñar un programa en el que entrado dos números `a`  y `b` retorne una variable booleana **True** o **false**.

  [Números amigos](https://es.wikipedia.org/wiki/N%C3%BAmeros_amigos) `a` y `b` tales que a es la suma de los divisores propios de `b` y viceversa.
    La rutina se debera llamar numeros_amigos




P2. Retornar los 10 primeros pares de numeros perfectos, semiperfectos, amigos

"""

def numeros_amigos(a,b):

  A = sum(propio(a))
  B = sum(propio(b))

  if (A == b) and (B ==a):
    return True
  else:
    return False
print(numeros_amigos(5020, 5564))

# Commented out IPython magic to ensure Python compatibility.
# %run -i {pathL}/test07.py

"""3. Determine si un número `n` entero ingresado por el usuario es un [palíndromo](https://en.wikipedia.org/wiki/Palindromic_number), (Retorne `True` en caso afirmativo y `False` en caso contrario)

```python


    >>> palindromo(3333333)
        True

    >>> palindromo(2323)
        True
        
    >>> palindromo(1111349111111)
        False
```



"""

def palindromo(n):

  a = str(n)
  aint = int(a[::-1])
  if n == aint:
    return True
  else:
    return False

#def palindromo(n):
#    return str(n) == str(n)[::-1]

print(palindromo(1818181818181818181))

"""8 Construir un programa en el que  entrado un arreglo de números se  ordenen de forma ascendente, Ver algoritmo
[Quicksort](https://es.wikipedia.org/wiki/Quicksort).


```python


<<< v = [22, 32, 42, 12, 22, 31, 41, 11, 12, 232, 24, 12, 22]
<<< def quicksort(v):

<<<     return v
<<< w = print(quicksort(v))
<<< [11, 12, 12, 12, 22, 22, 22, 24, 31, 32, 41, 42, 232]

```

Sólo para comprobar tu código,  puedes hacer uso del comando sort de python.
```python
<<< b = [22, 32, 42, 12, 22, 31, 41, 11, 12, 232, 24, 12, 22]

<<< print(b.sort())

<<< [11, 12, 12, 12, 22, 22, 22, 24, 31, 32, 41, 42, 232]
```
"""

lista = [22, 32, 42, 12, 22, 31, 41, 11, 12, 232, 24, 12, 22]

def dividir(lista, pivote):
    pivote = lista[0]
    menorlista = []
    mayorlista = []
    for elem in lista[1:]:
        if elem < pivote:
            menorlista.append(elem)
        else:
            mayorlista.append(elem)
    return menorlista, pivote, mayorlista

def quicksort(lista):
    if len(lista) < 2:
        return lista
    else:
        menores, piv, mayores = dividir(lista, pivote) # Aqui se hace recursion de la fun dividir
        return quicksort(menores) + [piv] + quicksort(mayores)# Aqui se hace recursion de la fun quicksor

print(quicksort(lista))

[11, 12, 12, 12, 22, 22, 22, 24, 31, 32, 41, 42, 232]

